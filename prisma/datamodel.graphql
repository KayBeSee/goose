type User {
  id: ID! @unique @id
  username: String
  email: String! @unique
  password: String!
  shows: [Show!]! @relation(name: "UserToShow", onDelete: SET_NULL)
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

type Song {
  id: ID! @unique @id
  name: String!
  originalArtist: String!
  notes: String
  tracks: [Track!]! @relation(name: "TrackToSong", onDelete: SET_NULL)
}


type Show {
  id: ID! @unique @id
  date: DateTime
  eventName: String
  notes: String
  venue: Venue! @relation(name: "VenueToShow", onDelete: SET_NULL)
  setlist: [Set!]! @relation(name: "SetToShow", onDelete: CASCADE)
  attendees: [User!]! @relation(name: "UserToShow", onDelete: SET_NULL)
  # comments: [Comment!]! @relation("CommentToShow", onDelete: CASCADE)
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
}

type Set {
  id: ID! @unique @id
  name: SetNumber
  tracks: [Track!]! @relation(name: "TrackToSet", onDelete: SET_NULL)
  show: Show! @relation(name: "SetToShow", onDelete: SET_NULL)
}

type Track {
  id: ID! @unique @id
  notes: String
  segue: Boolean
  song: Song! @relation(name: "TrackToSong", onDelete: SET_NULL)
  # show: Show! @relation(name: "TrackToSet", onDelete: SET_NULL)
  set: Set! @relation(name: "TrackToSet", onDelete: SET_NULL)
  videos: [Video!]! @relation(name: "VideoToTrack", onDelete: SET_NULL)
}

type Venue {
  id: ID! @unique @id
  name: String!
  city: String
  state: String
  shows: [Show!]! @relation(name: "VenueToShow", onDelete: SET_NULL)
}

type Video {
  id: ID! @unique @id
  videoId: String! @unique
  tracks: [Track!]! @relation(name: "VideoToTrack", onDelete: SET_NULL)
}

# type Comment {
#   id: ID!
#   author: User! @relation(name: "CommentToUser", onDelete: SET_NULL)
#   text: String
#   rating: Int
# }

enum SetNumber {
  SET_1
  SET_2
  SET_3
  SET_4
  SET_5
  SET_6
  ENCORE
  ENCORE_2
  ENCORE_3
}