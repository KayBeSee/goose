# source: http://localhost:4466
# timestamp: Thu Mar 26 2020 18:12:07 GMT-0500 (CDT)

type AggregateSet {
  count: Int!
}

type AggregateShow {
  count: Int!
}

type AggregateSong {
  count: Int!
}

type AggregateTrack {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVenue {
  count: Int!
}

type AggregateVideo {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createSong(data: SongCreateInput!): Song!
  createShow(data: ShowCreateInput!): Show!
  createSet(data: SetCreateInput!): Set!
  createTrack(data: TrackCreateInput!): Track!
  createVenue(data: VenueCreateInput!): Venue!
  createVideo(data: VideoCreateInput!): Video!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateSong(data: SongUpdateInput!, where: SongWhereUniqueInput!): Song
  updateShow(data: ShowUpdateInput!, where: ShowWhereUniqueInput!): Show
  updateSet(data: SetUpdateInput!, where: SetWhereUniqueInput!): Set
  updateTrack(data: TrackUpdateInput!, where: TrackWhereUniqueInput!): Track
  updateVenue(data: VenueUpdateInput!, where: VenueWhereUniqueInput!): Venue
  updateVideo(data: VideoUpdateInput!, where: VideoWhereUniqueInput!): Video
  deleteUser(where: UserWhereUniqueInput!): User
  deleteSong(where: SongWhereUniqueInput!): Song
  deleteShow(where: ShowWhereUniqueInput!): Show
  deleteSet(where: SetWhereUniqueInput!): Set
  deleteTrack(where: TrackWhereUniqueInput!): Track
  deleteVenue(where: VenueWhereUniqueInput!): Venue
  deleteVideo(where: VideoWhereUniqueInput!): Video
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertSong(where: SongWhereUniqueInput!, create: SongCreateInput!, update: SongUpdateInput!): Song!
  upsertShow(where: ShowWhereUniqueInput!, create: ShowCreateInput!, update: ShowUpdateInput!): Show!
  upsertSet(where: SetWhereUniqueInput!, create: SetCreateInput!, update: SetUpdateInput!): Set!
  upsertTrack(where: TrackWhereUniqueInput!, create: TrackCreateInput!, update: TrackUpdateInput!): Track!
  upsertVenue(where: VenueWhereUniqueInput!, create: VenueCreateInput!, update: VenueUpdateInput!): Venue!
  upsertVideo(where: VideoWhereUniqueInput!, create: VideoCreateInput!, update: VideoUpdateInput!): Video!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManySongs(data: SongUpdateInput!, where: SongWhereInput): BatchPayload!
  updateManyShows(data: ShowUpdateInput!, where: ShowWhereInput): BatchPayload!
  updateManySets(data: SetUpdateInput!, where: SetWhereInput): BatchPayload!
  updateManyTracks(data: TrackUpdateInput!, where: TrackWhereInput): BatchPayload!
  updateManyVenues(data: VenueUpdateInput!, where: VenueWhereInput): BatchPayload!
  updateManyVideos(data: VideoUpdateInput!, where: VideoWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManySongs(where: SongWhereInput): BatchPayload!
  deleteManyShows(where: ShowWhereInput): BatchPayload!
  deleteManySets(where: SetWhereInput): BatchPayload!
  deleteManyTracks(where: TrackWhereInput): BatchPayload!
  deleteManyVenues(where: VenueWhereInput): BatchPayload!
  deleteManyVideos(where: VideoWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  songs(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Song]!
  shows(where: ShowWhereInput, orderBy: ShowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Show]!
  sets(where: SetWhereInput, orderBy: SetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Set]!
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track]!
  venues(where: VenueWhereInput, orderBy: VenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Venue]!
  videos(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video]!
  user(where: UserWhereUniqueInput!): User
  song(where: SongWhereUniqueInput!): Song
  show(where: ShowWhereUniqueInput!): Show
  set(where: SetWhereUniqueInput!): Set
  track(where: TrackWhereUniqueInput!): Track
  venue(where: VenueWhereUniqueInput!): Venue
  video(where: VideoWhereUniqueInput!): Video
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  songsConnection(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SongConnection!
  showsConnection(where: ShowWhereInput, orderBy: ShowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShowConnection!
  setsConnection(where: SetWhereInput, orderBy: SetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SetConnection!
  tracksConnection(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TrackConnection!
  venuesConnection(where: VenueWhereInput, orderBy: VenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VenueConnection!
  videosConnection(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Set implements Node {
  id: ID!
  name: SetNumber
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
  show(where: ShowWhereInput): Show!
}

"""A connection to a list of items."""
type SetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SetEdge]!
  aggregate: AggregateSet!
}

input SetCreateInput {
  name: SetNumber
  tracks: TrackCreateManyWithoutSetInput
  show: ShowCreateOneWithoutSetlistInput!
}

input SetCreateManyWithoutShowInput {
  create: [SetCreateWithoutShowInput!]
  connect: [SetWhereUniqueInput!]
}

input SetCreateOneWithoutTracksInput {
  create: SetCreateWithoutTracksInput
  connect: SetWhereUniqueInput
}

input SetCreateWithoutShowInput {
  name: SetNumber
  tracks: TrackCreateManyWithoutSetInput
}

input SetCreateWithoutTracksInput {
  name: SetNumber
  show: ShowCreateOneWithoutSetlistInput!
}

"""An edge in a connection."""
type SetEdge {
  """The item at the end of the edge."""
  node: Set!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SetNumber {
  SET_1
  SET_2
  SET_3
  SET_4
  SET_5
  SET_6
  ENCORE
  ENCORE_2
  ENCORE_3
}

enum SetOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SetPreviousValues {
  id: ID!
  name: SetNumber
}

type SetSubscriptionPayload {
  mutation: MutationType!
  node: Set
  updatedFields: [String!]
  previousValues: SetPreviousValues
}

input SetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SetSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SetWhereInput
}

input SetUpdateInput {
  name: SetNumber
  tracks: TrackUpdateManyWithoutSetInput
  show: ShowUpdateOneWithoutSetlistInput
}

input SetUpdateManyWithoutShowInput {
  create: [SetCreateWithoutShowInput!]
  connect: [SetWhereUniqueInput!]
  disconnect: [SetWhereUniqueInput!]
  delete: [SetWhereUniqueInput!]
  update: [SetUpdateWithWhereUniqueWithoutShowInput!]
  upsert: [SetUpsertWithWhereUniqueWithoutShowInput!]
}

input SetUpdateOneWithoutTracksInput {
  create: SetCreateWithoutTracksInput
  connect: SetWhereUniqueInput
  delete: Boolean
  update: SetUpdateWithoutTracksDataInput
  upsert: SetUpsertWithoutTracksInput
}

input SetUpdateWithoutShowDataInput {
  name: SetNumber
  tracks: TrackUpdateManyWithoutSetInput
}

input SetUpdateWithoutTracksDataInput {
  name: SetNumber
  show: ShowUpdateOneWithoutSetlistInput
}

input SetUpdateWithWhereUniqueWithoutShowInput {
  where: SetWhereUniqueInput!
  data: SetUpdateWithoutShowDataInput!
}

input SetUpsertWithoutTracksInput {
  update: SetUpdateWithoutTracksDataInput!
  create: SetCreateWithoutTracksInput!
}

input SetUpsertWithWhereUniqueWithoutShowInput {
  where: SetWhereUniqueInput!
  update: SetUpdateWithoutShowDataInput!
  create: SetCreateWithoutShowInput!
}

input SetWhereInput {
  """Logical AND on all given filters."""
  AND: [SetWhereInput!]

  """Logical OR on all given filters."""
  OR: [SetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: SetNumber

  """All values that are not equal to given value."""
  name_not: SetNumber

  """All values that are contained in given list."""
  name_in: [SetNumber!]

  """All values that are not contained in given list."""
  name_not_in: [SetNumber!]
  tracks_every: TrackWhereInput
  tracks_some: TrackWhereInput
  tracks_none: TrackWhereInput
  show: ShowWhereInput
}

input SetWhereUniqueInput {
  id: ID
}

type Show implements Node {
  id: ID!
  date: DateTime
  eventName: String
  notes: String
  venue(where: VenueWhereInput): Venue!
  setlist(where: SetWhereInput, orderBy: SetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Set!]
  attendees(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
}

"""A connection to a list of items."""
type ShowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShowEdge]!
  aggregate: AggregateShow!
}

input ShowCreateInput {
  date: DateTime
  eventName: String
  notes: String
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
  venue: VenueCreateOneWithoutShowsInput!
  setlist: SetCreateManyWithoutShowInput
  attendees: UserCreateManyWithoutShowsInput
}

input ShowCreateManyWithoutAttendeesInput {
  create: [ShowCreateWithoutAttendeesInput!]
  connect: [ShowWhereUniqueInput!]
}

input ShowCreateManyWithoutVenueInput {
  create: [ShowCreateWithoutVenueInput!]
  connect: [ShowWhereUniqueInput!]
}

input ShowCreateOneWithoutSetlistInput {
  create: ShowCreateWithoutSetlistInput
  connect: ShowWhereUniqueInput
}

input ShowCreateWithoutAttendeesInput {
  date: DateTime
  eventName: String
  notes: String
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
  venue: VenueCreateOneWithoutShowsInput!
  setlist: SetCreateManyWithoutShowInput
}

input ShowCreateWithoutSetlistInput {
  date: DateTime
  eventName: String
  notes: String
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
  venue: VenueCreateOneWithoutShowsInput!
  attendees: UserCreateManyWithoutShowsInput
}

input ShowCreateWithoutVenueInput {
  date: DateTime
  eventName: String
  notes: String
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
  setlist: SetCreateManyWithoutShowInput
  attendees: UserCreateManyWithoutShowsInput
}

"""An edge in a connection."""
type ShowEdge {
  """The item at the end of the edge."""
  node: Show!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ShowOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  eventName_ASC
  eventName_DESC
  notes_ASC
  notes_DESC
  archiveUrl_ASC
  archiveUrl_DESC
  relisten_ASC
  relisten_DESC
  nugsNetId_ASC
  nugsNetId_DESC
  bandcampAlbumId_ASC
  bandcampAlbumId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ShowPreviousValues {
  id: ID!
  date: DateTime
  eventName: String
  notes: String
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
}

type ShowSubscriptionPayload {
  mutation: MutationType!
  node: Show
  updatedFields: [String!]
  previousValues: ShowPreviousValues
}

input ShowSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ShowSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShowSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShowSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ShowWhereInput
}

input ShowUpdateInput {
  date: DateTime
  eventName: String
  notes: String
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
  venue: VenueUpdateOneWithoutShowsInput
  setlist: SetUpdateManyWithoutShowInput
  attendees: UserUpdateManyWithoutShowsInput
}

input ShowUpdateManyWithoutAttendeesInput {
  create: [ShowCreateWithoutAttendeesInput!]
  connect: [ShowWhereUniqueInput!]
  disconnect: [ShowWhereUniqueInput!]
  delete: [ShowWhereUniqueInput!]
  update: [ShowUpdateWithWhereUniqueWithoutAttendeesInput!]
  upsert: [ShowUpsertWithWhereUniqueWithoutAttendeesInput!]
}

input ShowUpdateManyWithoutVenueInput {
  create: [ShowCreateWithoutVenueInput!]
  connect: [ShowWhereUniqueInput!]
  disconnect: [ShowWhereUniqueInput!]
  delete: [ShowWhereUniqueInput!]
  update: [ShowUpdateWithWhereUniqueWithoutVenueInput!]
  upsert: [ShowUpsertWithWhereUniqueWithoutVenueInput!]
}

input ShowUpdateOneWithoutSetlistInput {
  create: ShowCreateWithoutSetlistInput
  connect: ShowWhereUniqueInput
  delete: Boolean
  update: ShowUpdateWithoutSetlistDataInput
  upsert: ShowUpsertWithoutSetlistInput
}

input ShowUpdateWithoutAttendeesDataInput {
  date: DateTime
  eventName: String
  notes: String
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
  venue: VenueUpdateOneWithoutShowsInput
  setlist: SetUpdateManyWithoutShowInput
}

input ShowUpdateWithoutSetlistDataInput {
  date: DateTime
  eventName: String
  notes: String
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
  venue: VenueUpdateOneWithoutShowsInput
  attendees: UserUpdateManyWithoutShowsInput
}

input ShowUpdateWithoutVenueDataInput {
  date: DateTime
  eventName: String
  notes: String
  archiveUrl: String
  relisten: String
  nugsNetId: String
  bandcampAlbumId: String
  setlist: SetUpdateManyWithoutShowInput
  attendees: UserUpdateManyWithoutShowsInput
}

input ShowUpdateWithWhereUniqueWithoutAttendeesInput {
  where: ShowWhereUniqueInput!
  data: ShowUpdateWithoutAttendeesDataInput!
}

input ShowUpdateWithWhereUniqueWithoutVenueInput {
  where: ShowWhereUniqueInput!
  data: ShowUpdateWithoutVenueDataInput!
}

input ShowUpsertWithoutSetlistInput {
  update: ShowUpdateWithoutSetlistDataInput!
  create: ShowCreateWithoutSetlistInput!
}

input ShowUpsertWithWhereUniqueWithoutAttendeesInput {
  where: ShowWhereUniqueInput!
  update: ShowUpdateWithoutAttendeesDataInput!
  create: ShowCreateWithoutAttendeesInput!
}

input ShowUpsertWithWhereUniqueWithoutVenueInput {
  where: ShowWhereUniqueInput!
  update: ShowUpdateWithoutVenueDataInput!
  create: ShowCreateWithoutVenueInput!
}

input ShowWhereInput {
  """Logical AND on all given filters."""
  AND: [ShowWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShowWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShowWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  eventName: String

  """All values that are not equal to given value."""
  eventName_not: String

  """All values that are contained in given list."""
  eventName_in: [String!]

  """All values that are not contained in given list."""
  eventName_not_in: [String!]

  """All values less than the given value."""
  eventName_lt: String

  """All values less than or equal the given value."""
  eventName_lte: String

  """All values greater than the given value."""
  eventName_gt: String

  """All values greater than or equal the given value."""
  eventName_gte: String

  """All values containing the given string."""
  eventName_contains: String

  """All values not containing the given string."""
  eventName_not_contains: String

  """All values starting with the given string."""
  eventName_starts_with: String

  """All values not starting with the given string."""
  eventName_not_starts_with: String

  """All values ending with the given string."""
  eventName_ends_with: String

  """All values not ending with the given string."""
  eventName_not_ends_with: String
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  archiveUrl: String

  """All values that are not equal to given value."""
  archiveUrl_not: String

  """All values that are contained in given list."""
  archiveUrl_in: [String!]

  """All values that are not contained in given list."""
  archiveUrl_not_in: [String!]

  """All values less than the given value."""
  archiveUrl_lt: String

  """All values less than or equal the given value."""
  archiveUrl_lte: String

  """All values greater than the given value."""
  archiveUrl_gt: String

  """All values greater than or equal the given value."""
  archiveUrl_gte: String

  """All values containing the given string."""
  archiveUrl_contains: String

  """All values not containing the given string."""
  archiveUrl_not_contains: String

  """All values starting with the given string."""
  archiveUrl_starts_with: String

  """All values not starting with the given string."""
  archiveUrl_not_starts_with: String

  """All values ending with the given string."""
  archiveUrl_ends_with: String

  """All values not ending with the given string."""
  archiveUrl_not_ends_with: String
  relisten: String

  """All values that are not equal to given value."""
  relisten_not: String

  """All values that are contained in given list."""
  relisten_in: [String!]

  """All values that are not contained in given list."""
  relisten_not_in: [String!]

  """All values less than the given value."""
  relisten_lt: String

  """All values less than or equal the given value."""
  relisten_lte: String

  """All values greater than the given value."""
  relisten_gt: String

  """All values greater than or equal the given value."""
  relisten_gte: String

  """All values containing the given string."""
  relisten_contains: String

  """All values not containing the given string."""
  relisten_not_contains: String

  """All values starting with the given string."""
  relisten_starts_with: String

  """All values not starting with the given string."""
  relisten_not_starts_with: String

  """All values ending with the given string."""
  relisten_ends_with: String

  """All values not ending with the given string."""
  relisten_not_ends_with: String
  nugsNetId: String

  """All values that are not equal to given value."""
  nugsNetId_not: String

  """All values that are contained in given list."""
  nugsNetId_in: [String!]

  """All values that are not contained in given list."""
  nugsNetId_not_in: [String!]

  """All values less than the given value."""
  nugsNetId_lt: String

  """All values less than or equal the given value."""
  nugsNetId_lte: String

  """All values greater than the given value."""
  nugsNetId_gt: String

  """All values greater than or equal the given value."""
  nugsNetId_gte: String

  """All values containing the given string."""
  nugsNetId_contains: String

  """All values not containing the given string."""
  nugsNetId_not_contains: String

  """All values starting with the given string."""
  nugsNetId_starts_with: String

  """All values not starting with the given string."""
  nugsNetId_not_starts_with: String

  """All values ending with the given string."""
  nugsNetId_ends_with: String

  """All values not ending with the given string."""
  nugsNetId_not_ends_with: String
  bandcampAlbumId: String

  """All values that are not equal to given value."""
  bandcampAlbumId_not: String

  """All values that are contained in given list."""
  bandcampAlbumId_in: [String!]

  """All values that are not contained in given list."""
  bandcampAlbumId_not_in: [String!]

  """All values less than the given value."""
  bandcampAlbumId_lt: String

  """All values less than or equal the given value."""
  bandcampAlbumId_lte: String

  """All values greater than the given value."""
  bandcampAlbumId_gt: String

  """All values greater than or equal the given value."""
  bandcampAlbumId_gte: String

  """All values containing the given string."""
  bandcampAlbumId_contains: String

  """All values not containing the given string."""
  bandcampAlbumId_not_contains: String

  """All values starting with the given string."""
  bandcampAlbumId_starts_with: String

  """All values not starting with the given string."""
  bandcampAlbumId_not_starts_with: String

  """All values ending with the given string."""
  bandcampAlbumId_ends_with: String

  """All values not ending with the given string."""
  bandcampAlbumId_not_ends_with: String
  venue: VenueWhereInput
  setlist_every: SetWhereInput
  setlist_some: SetWhereInput
  setlist_none: SetWhereInput
  attendees_every: UserWhereInput
  attendees_some: UserWhereInput
  attendees_none: UserWhereInput
}

input ShowWhereUniqueInput {
  id: ID
}

type Song implements Node {
  id: ID!
  name: String!
  originalArtist: String!
  notes: String
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
}

"""A connection to a list of items."""
type SongConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SongEdge]!
  aggregate: AggregateSong!
}

input SongCreateInput {
  name: String!
  originalArtist: String!
  notes: String
  tracks: TrackCreateManyWithoutSongInput
}

input SongCreateOneWithoutTracksInput {
  create: SongCreateWithoutTracksInput
  connect: SongWhereUniqueInput
}

input SongCreateWithoutTracksInput {
  name: String!
  originalArtist: String!
  notes: String
}

"""An edge in a connection."""
type SongEdge {
  """The item at the end of the edge."""
  node: Song!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SongOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  originalArtist_ASC
  originalArtist_DESC
  notes_ASC
  notes_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SongPreviousValues {
  id: ID!
  name: String!
  originalArtist: String!
  notes: String
}

type SongSubscriptionPayload {
  mutation: MutationType!
  node: Song
  updatedFields: [String!]
  previousValues: SongPreviousValues
}

input SongSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SongSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SongSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SongSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SongWhereInput
}

input SongUpdateInput {
  name: String
  originalArtist: String
  notes: String
  tracks: TrackUpdateManyWithoutSongInput
}

input SongUpdateOneWithoutTracksInput {
  create: SongCreateWithoutTracksInput
  connect: SongWhereUniqueInput
  delete: Boolean
  update: SongUpdateWithoutTracksDataInput
  upsert: SongUpsertWithoutTracksInput
}

input SongUpdateWithoutTracksDataInput {
  name: String
  originalArtist: String
  notes: String
}

input SongUpsertWithoutTracksInput {
  update: SongUpdateWithoutTracksDataInput!
  create: SongCreateWithoutTracksInput!
}

input SongWhereInput {
  """Logical AND on all given filters."""
  AND: [SongWhereInput!]

  """Logical OR on all given filters."""
  OR: [SongWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SongWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  originalArtist: String

  """All values that are not equal to given value."""
  originalArtist_not: String

  """All values that are contained in given list."""
  originalArtist_in: [String!]

  """All values that are not contained in given list."""
  originalArtist_not_in: [String!]

  """All values less than the given value."""
  originalArtist_lt: String

  """All values less than or equal the given value."""
  originalArtist_lte: String

  """All values greater than the given value."""
  originalArtist_gt: String

  """All values greater than or equal the given value."""
  originalArtist_gte: String

  """All values containing the given string."""
  originalArtist_contains: String

  """All values not containing the given string."""
  originalArtist_not_contains: String

  """All values starting with the given string."""
  originalArtist_starts_with: String

  """All values not starting with the given string."""
  originalArtist_not_starts_with: String

  """All values ending with the given string."""
  originalArtist_ends_with: String

  """All values not ending with the given string."""
  originalArtist_not_ends_with: String
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  tracks_every: TrackWhereInput
  tracks_some: TrackWhereInput
  tracks_none: TrackWhereInput
}

input SongWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  song(where: SongSubscriptionWhereInput): SongSubscriptionPayload
  show(where: ShowSubscriptionWhereInput): ShowSubscriptionPayload
  set(where: SetSubscriptionWhereInput): SetSubscriptionPayload
  track(where: TrackSubscriptionWhereInput): TrackSubscriptionPayload
  venue(where: VenueSubscriptionWhereInput): VenueSubscriptionPayload
  video(where: VideoSubscriptionWhereInput): VideoSubscriptionPayload
}

type Track implements Node {
  id: ID!
  notes: String
  segue: Boolean
  song(where: SongWhereInput): Song!
  set(where: SetWhereInput): Set!
  videos(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video!]
}

"""A connection to a list of items."""
type TrackConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TrackEdge]!
  aggregate: AggregateTrack!
}

input TrackCreateInput {
  notes: String
  segue: Boolean
  song: SongCreateOneWithoutTracksInput!
  set: SetCreateOneWithoutTracksInput!
  videos: VideoCreateManyWithoutTracksInput
}

input TrackCreateManyWithoutSetInput {
  create: [TrackCreateWithoutSetInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateManyWithoutSongInput {
  create: [TrackCreateWithoutSongInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateManyWithoutVideosInput {
  create: [TrackCreateWithoutVideosInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateWithoutSetInput {
  notes: String
  segue: Boolean
  song: SongCreateOneWithoutTracksInput!
  videos: VideoCreateManyWithoutTracksInput
}

input TrackCreateWithoutSongInput {
  notes: String
  segue: Boolean
  set: SetCreateOneWithoutTracksInput!
  videos: VideoCreateManyWithoutTracksInput
}

input TrackCreateWithoutVideosInput {
  notes: String
  segue: Boolean
  song: SongCreateOneWithoutTracksInput!
  set: SetCreateOneWithoutTracksInput!
}

"""An edge in a connection."""
type TrackEdge {
  """The item at the end of the edge."""
  node: Track!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TrackOrderByInput {
  id_ASC
  id_DESC
  notes_ASC
  notes_DESC
  segue_ASC
  segue_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TrackPreviousValues {
  id: ID!
  notes: String
  segue: Boolean
}

type TrackSubscriptionPayload {
  mutation: MutationType!
  node: Track
  updatedFields: [String!]
  previousValues: TrackPreviousValues
}

input TrackSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TrackSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TrackSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TrackSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TrackWhereInput
}

input TrackUpdateInput {
  notes: String
  segue: Boolean
  song: SongUpdateOneWithoutTracksInput
  set: SetUpdateOneWithoutTracksInput
  videos: VideoUpdateManyWithoutTracksInput
}

input TrackUpdateManyWithoutSetInput {
  create: [TrackCreateWithoutSetInput!]
  connect: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  delete: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutSetInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutSetInput!]
}

input TrackUpdateManyWithoutSongInput {
  create: [TrackCreateWithoutSongInput!]
  connect: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  delete: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutSongInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutSongInput!]
}

input TrackUpdateManyWithoutVideosInput {
  create: [TrackCreateWithoutVideosInput!]
  connect: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  delete: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutVideosInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutVideosInput!]
}

input TrackUpdateWithoutSetDataInput {
  notes: String
  segue: Boolean
  song: SongUpdateOneWithoutTracksInput
  videos: VideoUpdateManyWithoutTracksInput
}

input TrackUpdateWithoutSongDataInput {
  notes: String
  segue: Boolean
  set: SetUpdateOneWithoutTracksInput
  videos: VideoUpdateManyWithoutTracksInput
}

input TrackUpdateWithoutVideosDataInput {
  notes: String
  segue: Boolean
  song: SongUpdateOneWithoutTracksInput
  set: SetUpdateOneWithoutTracksInput
}

input TrackUpdateWithWhereUniqueWithoutSetInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutSetDataInput!
}

input TrackUpdateWithWhereUniqueWithoutSongInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutSongDataInput!
}

input TrackUpdateWithWhereUniqueWithoutVideosInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutVideosDataInput!
}

input TrackUpsertWithWhereUniqueWithoutSetInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutSetDataInput!
  create: TrackCreateWithoutSetInput!
}

input TrackUpsertWithWhereUniqueWithoutSongInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutSongDataInput!
  create: TrackCreateWithoutSongInput!
}

input TrackUpsertWithWhereUniqueWithoutVideosInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutVideosDataInput!
  create: TrackCreateWithoutVideosInput!
}

input TrackWhereInput {
  """Logical AND on all given filters."""
  AND: [TrackWhereInput!]

  """Logical OR on all given filters."""
  OR: [TrackWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TrackWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  segue: Boolean

  """All values that are not equal to given value."""
  segue_not: Boolean
  song: SongWhereInput
  set: SetWhereInput
  videos_every: VideoWhereInput
  videos_some: VideoWhereInput
  videos_none: VideoWhereInput
}

input TrackWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  username: String
  email: String!
  password: String!
  shows(where: ShowWhereInput, orderBy: ShowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Show!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String
  email: String!
  password: String!
  shows: ShowCreateManyWithoutAttendeesInput
}

input UserCreateManyWithoutShowsInput {
  create: [UserCreateWithoutShowsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutShowsInput {
  username: String
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  shows: ShowUpdateManyWithoutAttendeesInput
}

input UserUpdateManyWithoutShowsInput {
  create: [UserCreateWithoutShowsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutShowsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutShowsInput!]
}

input UserUpdateWithoutShowsDataInput {
  username: String
  email: String
  password: String
}

input UserUpdateWithWhereUniqueWithoutShowsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutShowsDataInput!
}

input UserUpsertWithWhereUniqueWithoutShowsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutShowsDataInput!
  create: UserCreateWithoutShowsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  shows_every: ShowWhereInput
  shows_some: ShowWhereInput
  shows_none: ShowWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Venue implements Node {
  id: ID!
  name: String!
  city: String
  state: String
  shows(where: ShowWhereInput, orderBy: ShowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Show!]
}

"""A connection to a list of items."""
type VenueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VenueEdge]!
  aggregate: AggregateVenue!
}

input VenueCreateInput {
  name: String!
  city: String
  state: String
  shows: ShowCreateManyWithoutVenueInput
}

input VenueCreateOneWithoutShowsInput {
  create: VenueCreateWithoutShowsInput
  connect: VenueWhereUniqueInput
}

input VenueCreateWithoutShowsInput {
  name: String!
  city: String
  state: String
}

"""An edge in a connection."""
type VenueEdge {
  """The item at the end of the edge."""
  node: Venue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VenueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VenuePreviousValues {
  id: ID!
  name: String!
  city: String
  state: String
}

type VenueSubscriptionPayload {
  mutation: MutationType!
  node: Venue
  updatedFields: [String!]
  previousValues: VenuePreviousValues
}

input VenueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VenueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VenueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VenueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VenueWhereInput
}

input VenueUpdateInput {
  name: String
  city: String
  state: String
  shows: ShowUpdateManyWithoutVenueInput
}

input VenueUpdateOneWithoutShowsInput {
  create: VenueCreateWithoutShowsInput
  connect: VenueWhereUniqueInput
  delete: Boolean
  update: VenueUpdateWithoutShowsDataInput
  upsert: VenueUpsertWithoutShowsInput
}

input VenueUpdateWithoutShowsDataInput {
  name: String
  city: String
  state: String
}

input VenueUpsertWithoutShowsInput {
  update: VenueUpdateWithoutShowsDataInput!
  create: VenueCreateWithoutShowsInput!
}

input VenueWhereInput {
  """Logical AND on all given filters."""
  AND: [VenueWhereInput!]

  """Logical OR on all given filters."""
  OR: [VenueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VenueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  shows_every: ShowWhereInput
  shows_some: ShowWhereInput
  shows_none: ShowWhereInput
}

input VenueWhereUniqueInput {
  id: ID
}

type Video implements Node {
  id: ID!
  videoId: String!
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
}

"""A connection to a list of items."""
type VideoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VideoEdge]!
  aggregate: AggregateVideo!
}

input VideoCreateInput {
  videoId: String!
  tracks: TrackCreateManyWithoutVideosInput
}

input VideoCreateManyWithoutTracksInput {
  create: [VideoCreateWithoutTracksInput!]
  connect: [VideoWhereUniqueInput!]
}

input VideoCreateWithoutTracksInput {
  videoId: String!
}

"""An edge in a connection."""
type VideoEdge {
  """The item at the end of the edge."""
  node: Video!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VideoOrderByInput {
  id_ASC
  id_DESC
  videoId_ASC
  videoId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VideoPreviousValues {
  id: ID!
  videoId: String!
}

type VideoSubscriptionPayload {
  mutation: MutationType!
  node: Video
  updatedFields: [String!]
  previousValues: VideoPreviousValues
}

input VideoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VideoWhereInput
}

input VideoUpdateInput {
  videoId: String
  tracks: TrackUpdateManyWithoutVideosInput
}

input VideoUpdateManyWithoutTracksInput {
  create: [VideoCreateWithoutTracksInput!]
  connect: [VideoWhereUniqueInput!]
  disconnect: [VideoWhereUniqueInput!]
  delete: [VideoWhereUniqueInput!]
  update: [VideoUpdateWithWhereUniqueWithoutTracksInput!]
  upsert: [VideoUpsertWithWhereUniqueWithoutTracksInput!]
}

input VideoUpdateWithoutTracksDataInput {
  videoId: String
}

input VideoUpdateWithWhereUniqueWithoutTracksInput {
  where: VideoWhereUniqueInput!
  data: VideoUpdateWithoutTracksDataInput!
}

input VideoUpsertWithWhereUniqueWithoutTracksInput {
  where: VideoWhereUniqueInput!
  update: VideoUpdateWithoutTracksDataInput!
  create: VideoCreateWithoutTracksInput!
}

input VideoWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  videoId: String

  """All values that are not equal to given value."""
  videoId_not: String

  """All values that are contained in given list."""
  videoId_in: [String!]

  """All values that are not contained in given list."""
  videoId_not_in: [String!]

  """All values less than the given value."""
  videoId_lt: String

  """All values less than or equal the given value."""
  videoId_lte: String

  """All values greater than the given value."""
  videoId_gt: String

  """All values greater than or equal the given value."""
  videoId_gte: String

  """All values containing the given string."""
  videoId_contains: String

  """All values not containing the given string."""
  videoId_not_contains: String

  """All values starting with the given string."""
  videoId_starts_with: String

  """All values not starting with the given string."""
  videoId_not_starts_with: String

  """All values ending with the given string."""
  videoId_ends_with: String

  """All values not ending with the given string."""
  videoId_not_ends_with: String
  tracks_every: TrackWhereInput
  tracks_some: TrackWhereInput
  tracks_none: TrackWhereInput
}

input VideoWhereUniqueInput {
  id: ID
  videoId: String
}
