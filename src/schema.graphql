# import User, Song, Show, Set, Track, Venue, Video, UserCreateInput, UserOrderByInput, SongOrderByInput, ShowOrderByInput, SetOrderByInput, TrackCreateInput, SongCreateInput, ShowWhereUniqueInput, SongWhereUniqueInput, TrackWhereUniqueInput from "./generated/prisma.graphql"

type Query {
  users(where: UserWhereInput, first: Int, skip: Int, after:String, orderBy: UserOrderByInput): [User!]!
  user(where: UserWhereUniqueInput): User
  songs(where: SongWhereInput, first: Int, skip: Int, after:String, orderBy: SongOrderByInput): [Song!]
  song(where: SongWhereUniqueInput!): Song
  shows(where: ShowWhereInput, first: Int, skip: Int, after:String, orderBy: ShowOrderByInput): [Show!]!
  show(where: ShowWhereUniqueInput!): Show
  sets(where: SetWhereInput, first: Int, skip: Int, after:String, orderBy: SetOrderByInput): [Set!]!
  tracks(where: TrackWhereInput, first: Int, skip: Int, after:String, orderBy: TrackOrderByInput): [Track!]!
  track(where: TrackWhereUniqueInput!): Track
  venues(where: VenueWhereInput, first: Int, skip: Int, after:String, orderBy: VenueOrderByInput): [Venue!]!
  venue(where: VenueWhereUniqueInput!): Venue
  videos(where: VideoWhereInput, first: Int, skip: Int, after:String, orderBy: VideoOrderByInput): [Video!]!
  video(where: VideoWhereUniqueInput!): Video
  me: User!
}

type Mutation {
  createUser(data: UserCreateInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!

  createSong(data: SongCreateInput!): Song!
  createTrack(data: TrackCreateInput!): Track!
  createSet(data: SetCreateInput!): Set!
  createShow(data: ShowCreateInput!): Show!
}

# type Subscription {

# }

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!,
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String,
  email: String,
  password: String
}

type User {
  id: ID!
  name: String!
  email: String
  password: String!
  age: Int
  updatedAt: String!
  createdAt: String!
}

type Song {
  id: ID!
  name: String!
  originalArtist: String!
  notes: String
  tracks: [Track!]!
  updatedAt: String!
  createdAt: String!
}

type Track {
  id: ID!
  notes: String
  segue: Boolean
  song: Song!
  # show: Show! @relation(name: "TrackToSet", onDelete: SET_NULL)
  set: Set!
  videos: [Video!]!
}

type Show {
  id: ID!
  date: String
  notes: String
  venue: Venue
  setlist: [Set!]
  archiveUrl: String
  nugsNetId: String
  bandcampAlbumId: String
}

type Venue {
  id: ID!
  name: String!
  city: String!
  state: String!
}

type Set {
  id: ID!
  name: SetNumber
  tracks: [Track!]
  show: Show!
}

type Video {
  id: ID!
  videoId: String!
  tracks: [Track!]!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

enum SetNumber {
  SET_1
  SET_2
  SET_3
  ENCORE_1
  ENCORE_2
}